/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	public class DATATYPE_AVATAR_INFOS : DATATYPE_BASE
	{
		public AVATAR_INFOS createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFOS datas = new AVATAR_INFOS();
			datas.dbid = stream.readUint64();
			datas.name = stream.readUnicode();
			datas.roleType = stream.readUint8();
			datas.weaponId = stream.readInt32();
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFOS v)
		{
			stream.writeUint64(v.dbid);
			stream.writeUnicode(v.name);
			stream.writeUint8(v.roleType);
			stream.writeInt32(v.weaponId);
		}
	}



	public class DATATYPE_AVATAR_INFOS_LIST : DATATYPE_BASE
	{
		private DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_AVATAR_INFOS itemType = new DATATYPE_AVATAR_INFOS();

			public List<AVATAR_INFOS> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<AVATAR_INFOS> datas = new List<AVATAR_INFOS>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<AVATAR_INFOS> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public AVATAR_INFOS_LIST createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFOS_LIST datas = new AVATAR_INFOS_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFOS_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_MATCHING_INFOS : DATATYPE_BASE
	{
		public MATCHING_INFOS createFromStreamEx(MemoryStream stream)
		{
			MATCHING_INFOS datas = new MATCHING_INFOS();
			datas.id = stream.readInt32();
			datas.name = stream.readUnicode();
			datas.roleType = stream.readUint8();
			datas.weaponId = stream.readInt32();
			datas.roomId = stream.readUint8();
			datas.roomPosition = stream.readUint8();
			datas.teamId = stream.readUint8();
			return datas;
		}

		public void addToStreamEx(Bundle stream, MATCHING_INFOS v)
		{
			stream.writeInt32(v.id);
			stream.writeUnicode(v.name);
			stream.writeUint8(v.roleType);
			stream.writeInt32(v.weaponId);
			stream.writeUint8(v.roomId);
			stream.writeUint8(v.roomPosition);
			stream.writeUint8(v.teamId);
		}
	}



	public class DATATYPE_MATCHING_INFOS_LIST : DATATYPE_BASE
	{
		private DATATYPE__MATCHING_INFOS_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__MATCHING_INFOS_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__MATCHING_INFOS_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_MATCHING_INFOS itemType = new DATATYPE_MATCHING_INFOS();

			public List<MATCHING_INFOS> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<MATCHING_INFOS> datas = new List<MATCHING_INFOS>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<MATCHING_INFOS> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public MATCHING_INFOS_LIST createFromStreamEx(MemoryStream stream)
		{
			MATCHING_INFOS_LIST datas = new MATCHING_INFOS_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, MATCHING_INFOS_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_FS_ENTITY_DATA : DATATYPE_BASE
	{
		public FS_ENTITY_DATA createFromStreamEx(MemoryStream stream)
		{
			FS_ENTITY_DATA datas = new FS_ENTITY_DATA();
			datas.entityid = stream.readInt32();
			datas.cmd_type = stream.readUint8();
			datas.datas = stream.readBlob();
			return datas;
		}

		public void addToStreamEx(Bundle stream, FS_ENTITY_DATA v)
		{
			stream.writeInt32(v.entityid);
			stream.writeUint8(v.cmd_type);
			stream.writeBlob(v.datas);
		}
	}



	public class DATATYPE_FS_FRAME_DATA : DATATYPE_BASE
	{
		private DATATYPE__FS_FRAME_DATA_operation_ArrayType_ChildArray operation_DataType = new DATATYPE__FS_FRAME_DATA_operation_ArrayType_ChildArray();

		public class DATATYPE__FS_FRAME_DATA_operation_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_FS_ENTITY_DATA itemType = new DATATYPE_FS_ENTITY_DATA();

			public List<FS_ENTITY_DATA> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<FS_ENTITY_DATA> datas = new List<FS_ENTITY_DATA>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<FS_ENTITY_DATA> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public FS_FRAME_DATA createFromStreamEx(MemoryStream stream)
		{
			FS_FRAME_DATA datas = new FS_FRAME_DATA();
			datas.frameid = stream.readUint32();
			datas.operation = operation_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, FS_FRAME_DATA v)
		{
			stream.writeUint32(v.frameid);
			operation_DataType.addToStreamEx(stream, v.operation);
		}
	}



	public class DATATYPE_FS_FRAME_LIST : DATATYPE_BASE
	{
		private DATATYPE__FS_FRAME_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__FS_FRAME_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__FS_FRAME_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_FS_FRAME_DATA itemType = new DATATYPE_FS_FRAME_DATA();

			public List<FS_FRAME_DATA> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<FS_FRAME_DATA> datas = new List<FS_FRAME_DATA>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<FS_FRAME_DATA> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public FS_FRAME_LIST createFromStreamEx(MemoryStream stream)
		{
			FS_FRAME_LIST datas = new FS_FRAME_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, FS_FRAME_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}


}