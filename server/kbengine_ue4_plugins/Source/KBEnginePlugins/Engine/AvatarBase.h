/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Avatar : public AvatarBase)
	tools = kbcmd
*/

#pragma once
#include "KBECommon.h"
#include "Entity.h"
#include "KBETypes.h"
#include "EntityCallAvatarBase.h"

class Method;
class Property;
class MemoryStream;
class FrameSyncReportBase;

// defined in */scripts/entity_defs/Avatar.def
	// Please inherit and implement "class Avatar : public AvatarBase"
class KBENGINEPLUGINS_API AvatarBase : public Entity
{
public:
	EntityBaseEntityCall_AvatarBase* pBaseEntityCall;
	EntityCellEntityCall_AvatarBase* pCellEntityCall;

	FrameSyncReportBase* componentFrameSync;
	virtual void onComponentFrameSyncChanged(const FrameSyncReportBase& oldValue) {}
	int8 gameStateC;
	virtual void onGameStateCChanged(int8 oldValue) {}
	uint8 modelID;
	virtual void onModelIDChanged(uint8 oldValue) {}
	float moveSpeed;
	virtual void onMoveSpeedChanged(float oldValue) {}
	FString name;
	virtual void onNameChanged(const FString& oldValue) {}
	uint8 roleType;
	virtual void onRoleTypeChanged(uint8 oldValue) {}
	int8 state;
	virtual void onStateChanged(int8 oldValue) {}
	uint8 teamID;
	virtual void onTeamIDChanged(uint8 oldValue) {}
	int32 weaponID;
	virtual void onWeaponIDChanged(int32 oldValue) {}

	virtual void onEnding() = 0; 
	virtual void onPlayerQuitMatch(int32 arg1) = 0; 
	virtual void onReadyForBattle() = 0; 
	virtual void onResPlayersInfo(const MATCHING_INFOS_LIST& arg1) = 0; 
	virtual void onReturnHalls() = 0; 
	virtual void onStatisticalResult(uint8 arg1, float arg2) = 0; 
	virtual void onTeamMateChange() = 0; 

	void onGetBase() override;
	void onGetCell() override;
	void onLoseCell() override;

	EntityCall* getBaseEntityCall() override;
	EntityCall* getCellEntityCall() override;


	void onRemoteMethodCall(MemoryStream& stream) override;
	void onUpdatePropertys(MemoryStream& stream) override;
	void callPropertysSetMethods() override;

	AvatarBase();
	virtual ~AvatarBase();

	void attachComponents() override;
	void detachComponents() override;

};

